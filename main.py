# Problem 44:
#     Pentagon Numbers
#
# Description:
#     Pentagonal numbers are generated by the formula, P_n = n(3n−1)/2.
#     The first ten pentagonal numbers are:
#         1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
#     It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8.
#     However, their difference, 70 − 22 = 48, is not pentagonal.
#
#     Find the pair of pentagonal numbers, P_j and P_k,
#       for which their sum and difference are pentagonal
#       and D = |P_k − P_j| is minimised; what is the value of D?

from math import floor, sqrt
from typing import Tuple


def is_pentagonal(x: int) -> bool:
    """
    Returns True iff `x` is a pentagonal number.

    Args:
        x (int): Natural number

    Returns:
        (bool): True iff `x` is pentagonal

    Raises:
        AssertError: if incorrect args are given
    """
    assert type(x) == int and x > 0
    # Idea:
    #     If `x` were a pentagonal number, then we must have
    #       x = i * (3*i-1) / 2, for some natural number i.
    #     Solving this for `i`, using the quadratic formula, we get:
    #       i = (1 + sqrt(1 + 24*x)) / 6
    #
    #     So if `i` turns out to be a whole number, x is indeed a pentagonal number.
    i = (1 + sqrt(1 + 24*x)) / 6
    return floor(i) == i


def main() -> Tuple[int, int]:
    """
    Returns the pair of pentagonal numbers P_j and P_k (where j < k),
      such that their sum and difference are both pentagonal numbers
      and the difference between the two is minimal.

    Returns:
        (Tuple[int, int]):
            Tuple of ...
              * Pentagonal number P_j
              * Pentagonal number P_k
    """
    pentagons = []  # Reverse-ordered list of pentagonal numbers calculated so far
    k = 1
    while True:
        p_k = k * (3*k - 1) // 2
        for p_j in pentagons:
            if is_pentagonal(p_k - p_j) and is_pentagonal(p_j + p_k):
                return p_j, p_k
        pentagons.insert(0, p_k)
        k += 1


if __name__ == '__main__':
    pentagon_j, pentagon_k = main()
    print('Pentagonal numbers:')
    print('  P_j = {:16d}'.format(pentagon_j))
    print('  P_k = {:16d}'.format(pentagon_k))
    print('Sum and Difference:')
    print('  P_j + P_k = {:10d}'.format(pentagon_j + pentagon_k))
    print('  P_k - P_j = {:10d}'.format(pentagon_k - pentagon_j))
